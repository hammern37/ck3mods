hire_physician_decision = {
	picture = "gfx/interface/illustrations/decisions/hire_physician.dds"

	desc = hire_physician_decision_desc
	selection_tooltip = hire_physician_decision_tooltip

	ai_check_interval = 0

	is_shown = {
		is_ruler = yes
	}

	cooldown = { days = 365 }

	is_valid_showing_failures_only = {
		is_available = yes
	}

	effect = {
		hidden_effect = {
			add_character_flag = {
				flag = health_3001_hire_physician_decision_text
				days = 20
			}
		}

		trigger_event = {
			id = health.3001
			days = 14
		}
		custom_tooltip = hire_physician_decision_effect_tooltip

	}
	
	ai_potential = {
		always = no
	}

	ai_will_do = {
		base = 0
	}
}


gain_weight_decision = { #by Linnéa Thimrén
	picture = "gfx/interface/illustrations/decisions/decision_misc.dds"

	desc = gain_weight_decision_desc
	selection_tooltip = gain_weight_decision_tooltip

	ai_check_interval = 0

	is_shown = {
		current_weight < -50
		NOT = { has_character_modifier = gaining_weight_modifier }
	}

	is_valid_showing_failures_only = {
		is_available = yes
	}

	effect = {
		add_character_modifier = {
			modifier = gaining_weight_modifier
		}
	}
	
	ai_potential = {
		always = no
	}

	ai_will_do = {
		base = 0
	}
}

stop_gain_weight_decision = { #by Linnéa Thimrén
	picture = "gfx/interface/illustrations/decisions/decision_activity.dds"

	desc = stop_gain_weight_decision_desc
	selection_tooltip = stop_gain_weight_decision_tooltip

	ai_check_interval = 0

	is_shown = {
		has_character_modifier = gaining_weight_modifier
	}

	effect = {
		remove_character_modifier = gaining_weight_modifier
	}
	
	ai_potential = {
		always = no
	}

	ai_will_do = {
		base = 0
	}
}

lose_weight_decision = { #by Linnéa Thimrén
	picture = "gfx/interface/illustrations/decisions/lose_weight.dds"

	desc = lose_weight_decision_desc
	selection_tooltip = lose_weight_decision_tooltip

	ai_check_interval = 0

	is_shown = {
		current_weight > 50
		NOT = { has_character_modifier = losing_weight_modifier }
	}

	is_valid_showing_failures_only = {
		is_available = yes
	}

	effect = {
		if = {
			limit = {
				has_trait = gluttonous
			}
			add_stress = medium_stress_gain
		}
		add_character_modifier = {
			modifier = losing_weight_modifier
		}
	}
	
	ai_potential = {
		always = no
	}

	ai_will_do = {
		base = 0
	}
}

stop_lose_weight_decision = { #by Linnéa Thimrén
	picture = "gfx/interface/illustrations/decisions/decision_misc.dds"

	desc = stop_lose_weight_decision_desc
	selection_tooltip = stop_lose_weight_decision_tooltip

	ai_check_interval = 0

	is_shown = {
		has_character_modifier = losing_weight_modifier
	}

	effect = {
		remove_character_modifier = losing_weight_modifier
	}
	
	ai_potential = {
		always = no
	}

	ai_will_do = {
		base = 0
	}
}

commit_suicide_decision = { #by Linnéa Thimrén
	picture = "gfx/interface/illustrations/decisions/commit_suicide.dds"

	desc = commit_suicide_decision_desc
	selection_tooltip = commit_suicide_decision_tooltip

	ai_check_interval = 500

	cooldown = { days = 1825 }

	is_shown = {
		is_adult = yes
		OR = {
			has_trait = depressed
			has_trait = incapable
			has_trait = cancer
			has_trait = leper
			has_trait = great_pox
			has_trait = lunatic
			has_character_flag = make_suicide_available
			stress >= extremely_high_stress
			AND = { #You have a criminal trait and you are stressed
				stress >= very_high_stress
				OR = {
					AND = {
						has_trait = witch
						faith = { has_doctrine_parameter = witchcraft_illegal }
					}
					AND = {
						has_trait = cannibal
						NOT = { faith = { has_doctrine = tenet_ritual_cannibalism } }
					}
					AND = {
						has_trait = sodomite
						faith = { has_doctrine_parameter = homosexuality_illegal }
					}
					AND = {
						has_trait = deviant
						faith = { has_doctrine_parameter = deviancy_illegal }
					}
					AND = {
						OR = {
							has_trait = adulterer
							has_trait = fornicator
						}
						OR = {
							AND = {
								faith = { has_doctrine_parameter = adultery_female_crime }
								is_female = yes
							}
							AND = {
								faith = { has_doctrine_parameter = adultery_male_crime }
								is_male = yes
							}
						}
					}
				}
			}
		}
	}

	is_valid_showing_failures_only = {
		is_in_an_activity = no
		is_imprisoned = no
	}

	effect = {
		show_as_tooltip = {
			committed_suicide_effect = yes
		}
		
		custom_tooltip = commit_suicide_decision_effect_tooltip
		trigger_event = {
			on_action = commit_suicide
		}
	}
	
	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 0
		modifier = {
			add = 30
			has_trait = depressed
		}
		modifier = {
			add = 25
			has_trait = incapable
		}
		modifier = {
			add = 10
			has_trait = cancer
		}
		modifier = {
			add = 10
			has_trait = leper
		}
		modifier = {
			add = 10
			has_trait = great_pox
		}
		modifier = {
			add = 10
			has_trait = lunatic
		}
		modifier = {
			add = 20
			has_character_flag = make_suicide_available
		}
	}
}

pet_dog_decision = { #by Linnéa Thimrén
	picture = "gfx/interface/illustrations/decisions/decision_misc.dds"

	desc = pet_dog_decision_desc
	selection_tooltip = pet_dog_decision_tooltip

	ai_check_interval = 120

	cooldown = { days = 1825 }

	is_shown = {
		any_owned_story = {
			story_type = story_cycle_pet_dog
			exists = story_owner.var:story_cycle_dog_name
		}
	}

	is_valid_showing_failures_only = {
		is_available = yes
	}

	effect = {
		custom_tooltip = pet_decision_effect_tooltip

		trigger_event = {
			on_action = story_cycle_dog_pet_decision_on_actions
		}
	}
	
	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 0

		modifier = {
			add = 25
			stress > low_medium_stress
		}

		modifier = {
			add = 50
			stress > medium_stress
		}

		modifier = {
			add = 50
			stress > high_stress
		}
	}
}

pet_cat_decision = { #by Linnéa Thimrén
	picture = "gfx/interface/illustrations/decisions/decision_misc.dds"

	desc = pet_cat_decision_desc
	selection_tooltip = pet_cat_decision_tooltip

	ai_check_interval = 120

	cooldown = { days = 1825 }

	is_shown = {
		any_owned_story = {
			story_type = story_cycle_pet_cat
			exists = story_owner.var:story_cycle_cat_name
		}
	}

	is_valid_showing_failures_only = {
		is_available = yes
	}

	effect = {
		custom_tooltip = pet_decision_effect_tooltip

		trigger_event = {
			on_action = story_cycle_cat_pet_decision_on_actions
		}
	}
	
	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 0

		modifier = {
			add = 25
			stress > low_medium_stress
		}

		modifier = {
			add = 50
			stress > medium_stress
		}

		modifier = {
			add = 50
			stress > high_stress
		}
	}
}

#DECISIONS TO "USE" YOUR STRESS COPING TRAITS TO LOSE STRESS

stress_loss_drunkard_decision = { #by Linnéa Thimrén
	picture = "gfx/interface/illustrations/decisions/decision_misc.dds"
	desc = stress_loss_drunkard_decision_desc
	selection_tooltip = stress_loss_drunkard_decision_tooltip

	ai_check_interval = 120

	cooldown = { days = 1095 }

	is_shown = {
		has_trait = drunkard
	}

	is_valid_showing_failures_only = {
		is_available = yes
	}

	effect = {
		
		custom_tooltip = stress_loss_drunkard_decision_effect_tooltip

		show_as_tooltip = { #The effect is actually applied in the event itself
			add_prestige = medium_prestige_loss
		}

		trigger_event = {
			on_action = stress_loss_drunkard
		}
	}
	
	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 0

		modifier = {
			add = 25
			stress > low_medium_stress
		}

		modifier = {
			add = 50
			stress > medium_stress
		}

		modifier = {
			add = 50
			stress > high_stress
		}
	}
}

stress_loss_hashishiyah_decision = { #by Linnéa Thimrén
	picture = "gfx/interface/illustrations/decisions/stress_loss_hashishiyah.dds"
	desc = stress_loss_hashishiyah_decision_desc
	selection_tooltip = stress_loss_hashishiyah_decision_tooltip

	ai_check_interval = 120

	cooldown = { days = 1095 }

	is_shown = {
		has_trait = hashishiyah
	}

	is_valid_showing_failures_only = {
		is_available = yes
	}

	effect = {
		
		custom_tooltip = stress_loss_drunkard_decision_effect_tooltip

		show_as_tooltip = { #The effect is actually applied in the event itself
			add_character_modifier = {
				modifier = stress_hashish_stupor
				years = 2
			}
		}

		trigger_event = {
			on_action = stress_loss_hashishiyah
		}
	}
	
	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 0

		modifier = {
			add = 25
			stress > low_medium_stress
		}

		modifier = {
			add = 50
			stress > medium_stress
		}

		modifier = {
			add = 50
			stress > high_stress
		}
	}
}

stress_loss_rakish_decision = { #by Linnéa Thimrén
	picture = "gfx/interface/illustrations/decisions/stress_loss_rakish.dds"
	desc = {
		desc = stress_loss_rakish_decision_desc
		desc = {
			first_valid = {
				triggered_desc = {
					trigger = {
						is_female = yes
					}
					desc = stress_loss_rakish_decision_desc_woman_ending
				}
				desc = stress_loss_rakish_decision_desc_man_ending
			}
		}
	}
	selection_tooltip = stress_loss_rakish_decision_tooltip

	ai_check_interval = 120

	cooldown = { days = 1095 }

	is_shown = {
		has_trait = rakish
	}

	is_valid_showing_failures_only = {
		is_available = yes
		short_term_gold >= minor_gold_value
	}

	effect = {
		show_as_tooltip = {
			remove_short_term_gold = minor_gold_value
		}
		custom_tooltip = stress_loss_drunkard_decision_effect_tooltip
		custom_tooltip = stress_threshold.1011.rakish.tt


		#So that stress_trait_coping_decisions.2002 can trigger in yearly events too
		save_scope_value_as = {
			name = from_stress_loss_decision
			value = yes
		}

		trigger_event = {
			on_action = stress_loss_rakish
		}
	}
	
	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 0

		modifier = {
			add = 25
			stress > low_medium_stress
		}

		modifier = {
			add = 50
			stress > medium_stress
		}

		modifier = {
			add = 50
			stress > high_stress
		}
	}
}

stress_loss_reclusive_decision = { #by Linnéa Thimrén
	picture = "gfx/interface/illustrations/decisions/stress_loss_reclusive.dds"
	desc = stress_loss_reclusive_decision_desc
	selection_tooltip = stress_loss_reclusive_decision_tooltip

	ai_check_interval = 120

	cooldown = { days = 1095 }

	is_shown = {
		has_trait = reclusive
	}

	is_valid_showing_failures_only = {
		is_available = yes
	}

	effect = {
		
		custom_tooltip = stress_loss_drunkard_decision_effect_tooltip

		show_as_tooltip = { #The effect is actually applied in the event itself
			add_prestige = medium_prestige_loss
		}

		trigger_event = {
			on_action = stress_loss_reclusive
		}
	}
	
	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 0

		modifier = {
			add = 25
			stress > low_medium_stress
		}

		modifier = {
			add = 50
			stress > medium_stress
		}

		modifier = {
			add = 50
			stress > high_stress
		}
	}
}

stress_loss_irritable_decision = { #by Linnéa Thimrén
	picture = "gfx/interface/illustrations/decisions/stress_loss_irritable.dds"
	desc = stress_loss_irritable_decision_desc
	selection_tooltip = stress_loss_irritable_decision_tooltip

	ai_check_interval = 120

	cooldown = { days = 1095 }

	is_shown = {
		has_trait = irritable
	}

	is_valid_showing_failures_only = {
		is_available = yes
	}

	effect = {
		
		custom_tooltip = stress_loss_drunkard_decision_effect_tooltip

		show_as_tooltip = { #The effect is actually applied in the event itself
			random_list = {
				50 = {
					custom_tooltip = stress_loss_irritable_decision_effect_tooltip
				}
				50 = {
					trigger = {
						any_vassal = {
							count >= 1
						}
					}
					add_character_modifier = {
						modifier = irritating_everyone_modifier
						years = 1
					}
				}
				50 = {
					trigger = {
						any_vassal = {
							count < 1
						}
					}
					add_character_modifier = {
						modifier = irritating_everyone_courtier_modifier
						years = 1
					}
				}
			}
		}

		trigger_event = {
			on_action = stress_loss_irritable
		}
	}
	
	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 0

		modifier = {
			add = 25
			stress > low_medium_stress
		}

		modifier = {
			add = 50
			stress > medium_stress
		}

		modifier = {
			add = 50
			stress > high_stress
		}
	}
}

stress_loss_flagellant_decision = { #by Linnéa Thimrén
	picture = "gfx/interface/illustrations/decisions/decision_personal_religious.dds"
	desc = stress_loss_flagellant_decision_desc
	selection_tooltip = stress_loss_flagellant_decision_tooltip

	ai_check_interval = 120

	cooldown = { days = 1095 }

	is_shown = {
		has_trait = flagellant
	}

	is_valid_showing_failures_only = {
		is_available = yes
	}

	effect = {
		
		custom_tooltip = stress_loss_flaggelant_decision_effect_tooltip

		show_as_tooltip = { #The effect is actually applied in the event itself
			increase_wounds_effect = { REASON = whipping }
		}

		trigger_event = {
			on_action = stress_loss_flagellant
		}
	}
	
	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 0

		modifier = {
			add = 25
			stress > low_medium_stress
		}

		modifier = {
			add = 50
			stress > medium_stress
		}

		modifier = {
			add = 50
			stress > high_stress
		}
	}
}

stress_loss_profligate_decision = { #by Linnéa Thimrén
	picture = "gfx/interface/illustrations/decisions/decision_misc.dds"
	desc = stress_loss_profligate_decision_desc
	selection_tooltip = stress_loss_profligate_decision_tooltip

	ai_check_interval = 120

	cooldown = { days = 1095 }

	is_shown = {
		has_trait = profligate
	}

	is_valid_showing_failures_only = {
		is_available = yes
		short_term_gold >= medium_gold_value
	}

	effect = {
		
		show_as_tooltip = { #The effect is actually applied in the event itself
			remove_short_term_gold = medium_gold_value
		}
		custom_tooltip = stress_loss_drunkard_decision_effect_tooltip


		trigger_event = {
			on_action = stress_loss_profligate
		}
	}
	
	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 0

		modifier = {
			add = 25
			stress > low_medium_stress
		}

		modifier = {
			add = 50
			stress > medium_stress
		}

		modifier = {
			add = 50
			stress > high_stress
		}
	}
}

stress_loss_improvident_decision = { #by Linnéa Thimrén
	picture = "gfx/interface/illustrations/decisions/decision_misc.dds"
	desc = stress_loss_improvident_decision_desc
	selection_tooltip = stress_loss_improvident_decision_tooltip

	ai_check_interval = 120

	cooldown = { days = 1095 }

	is_shown = {
		has_trait = improvident
	}

	is_valid_showing_failures_only = {
		is_available = yes
		short_term_gold >= medium_gold_value
	}

	effect = {
		
		show_as_tooltip = { #The effect is actually applied in the event itself
			remove_short_term_gold = medium_gold_value
		}
		custom_tooltip = stress_loss_drunkard_decision_effect_tooltip


		trigger_event = {
			on_action = stress_loss_improvident
		}
	}
	
	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 0

		modifier = {
			add = 25
			stress > low_medium_stress
		}

		modifier = {
			add = 50
			stress > medium_stress
		}

		modifier = {
			add = 50
			stress > high_stress
		}
	}
}

stress_loss_contrite_decision = { #by Linnéa Thimrén
	picture = "gfx/interface/illustrations/decisions/decision_misc.dds"
	desc = stress_loss_contrite_decision_desc
	selection_tooltip = stress_loss_contrite_decision_tooltip

	ai_check_interval = 120

	cooldown = { days = 1095 }

	is_shown = {
		has_trait = contrite
	}

	is_valid_showing_failures_only = {
		is_available = yes
		NOT = { has_character_modifier = stress_disturbing_confession }
	}

	effect = {
		
		custom_tooltip = stress_loss_drunkard_decision_effect_tooltip

		show_as_tooltip = { #The effect is actually applied in the event itself
			if = {
				limit = {
					any_secret = {
						can_be_exposed_by = root
					}
				}
				custom_tooltip = stress_loss_contrite_decision_expose_random_secret
			}
			else = {
				add_character_modifier = {
					modifier = stress_disturbing_confession
					years = 2
				}
			}
		}

		trigger_event = {
			on_action = stress_loss_contrite
		}
	}
	
	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 0

		modifier = {
			add = 25
			stress > low_medium_stress
		}

		modifier = {
			add = 50
			stress > medium_stress
		}

		modifier = {
			add = 50
			stress > high_stress
		}
	}
}

stress_loss_comfort_eater_decision = { #by Linnéa Thimrén
	picture = "gfx/interface/illustrations/decisions/decision_misc.dds"
	desc = stress_loss_comfort_eater_decision_desc
	selection_tooltip = stress_loss_comfort_eater_decision_tooltip

	ai_check_interval = 120

	cooldown = { days = 1095 }

	is_shown = {
		has_trait = comfort_eater
	}

	is_valid_showing_failures_only = {
		is_available = yes
		short_term_gold >= medium_gold_value
	}

	effect = {
		
		show_as_tooltip = { #The effect is actually applied in the event itself
			remove_short_term_gold = medium_gold_value
		}
		custom_tooltip = stress_loss_drunkard_decision_effect_tooltip


		trigger_event = {
			on_action = stress_loss_comfort_eater
		}
	}
	
	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 0

		modifier = {
			add = 25
			stress > low_medium_stress
		}

		modifier = {
			add = 50
			stress > medium_stress
		}

		modifier = {
			add = 50
			stress > high_stress
		}
	}
}

stress_loss_inappetetic_decision = { #by Linnéa Thimrén
	picture = "gfx/interface/illustrations/decisions/decision_misc.dds"
	desc = stress_loss_inappetetic_decision_desc
	selection_tooltip = stress_loss_inappetetic_decision_tooltip

	ai_check_interval = 120

	cooldown = { days = 1095 }

	is_shown = {
		has_trait = inappetetic
	}

	is_valid_showing_failures_only = {
		is_available = yes
	}

	effect = {
		
		custom_tooltip = stress_loss_drunkard_decision_effect_tooltip

		show_as_tooltip = { #The effect is actually applied in the event itself
			inappetetic_advance_starvation_effect = yes
		}

		trigger_event = {
			on_action = stress_loss_inappetetic
		}
	}
	
	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 0

		modifier = {
			add = 25
			stress > low_medium_stress
		}

		modifier = {
			add = 50
			stress > medium_stress
		}

		modifier = {
			add = 50
			stress > high_stress
		}
	}
}

stress_loss_journaller_decision = { #by Linnéa Thimrén
	picture = "gfx/interface/illustrations/decisions/decision_misc.dds"
	desc = stress_loss_journaller_decision_desc
	selection_tooltip = stress_loss_journaller_decision_tooltip

	ai_check_interval = 120

	cooldown = { days = 1095 }

	is_shown = {
		has_trait = journaller
	}

	is_valid_showing_failures_only = {
		is_available = yes
		NOT = { has_character_modifier = stress_busy_writing }
	}

	effect = {
		
		custom_tooltip = stress_loss_drunkard_decision_effect_tooltip

		show_as_tooltip = { #The effect is actually applied in the event itself
			add_character_modifier = {
				modifier = stress_busy_writing
				years = 1
			}
		}

		trigger_event = {
			on_action = stress_loss_journaller
		}
	}
	
	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 0

		modifier = {
			add = 25
			stress > low_medium_stress
		}

		modifier = {
			add = 50
			stress > medium_stress
		}

		modifier = {
			add = 50
			stress > high_stress
		}
	}
}

stress_loss_confider_decision = { #by Linnéa Thimrén
	picture = "gfx/interface/illustrations/decisions/decision_misc.dds"
	desc = stress_loss_confider_decision_desc
	selection_tooltip = stress_loss_confider_decision_tooltip

	ai_check_interval = 120

	cooldown = { days = 1095 }

	is_shown = {
		has_trait = confider
	}

	is_valid_showing_failures_only = {
		is_available = yes
	}

	effect = {
		
		custom_tooltip = stress_loss_drunkard_decision_effect_tooltip

		show_as_tooltip = { #The effect is actually applied in the event itself
			every_courtier = {
				custom = all_courtiers_except_confidant
				limit = {
					NOT = {
						any_relation = {
							type = friend
							has_relation_flag = {
								target = root
								relation = friend
								flag = has_been_confided_in
							}
						}
					}
				}
				add_opinion = {
					target = root
					modifier = envy_opinion
					opinion = -10
				}
			}
			if = {
				limit = {
					any_relation = {
						type = friend
						has_relation_flag = {
							target = root
							relation = friend
							flag = has_been_confided_in
						}
					}
				}
				random_relation = {
					type = friend
					limit = {
						has_relation_flag = {
							target = root
							relation = friend
							flag = has_been_confided_in
						}
					}
					add_opinion = {
						target = root
						modifier = friendliness_opinion
						opinion = 5
					}
				}
			}
		}

		trigger_event = {
			on_action = stress_loss_confider
		}
	}
	
	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 0

		modifier = {
			add = 25
			stress > low_medium_stress
		}

		modifier = {
			add = 50
			stress > medium_stress
		}

		modifier = {
			add = 50
			stress > high_stress
		}
	}
}

stress_loss_athletic_decision = { #by Linnéa Thimrén
	picture = "gfx/interface/illustrations/decisions/stress_loss_athletic.dds"
	desc = stress_loss_athletic_decision_desc
	selection_tooltip = stress_loss_athletic_decision_tooltip

	ai_check_interval = 120

	cooldown = { days = 1095 }

	is_shown = {
		has_trait = athletic
	}

	is_valid_showing_failures_only = {
		is_available = yes
		NOT = { has_character_modifier = stress_smelling_of_sweat }
	}

	effect = {
		
		custom_tooltip = stress_loss_drunkard_decision_effect_tooltip

		show_as_tooltip = { #The effect is actually applied in the event itself
			add_character_modifier = {
				modifier = stress_smelling_of_sweat
				years = 1
			}
		}

		trigger_event = {
			on_action = stress_loss_athletic
		}
	}
	
	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 0

		modifier = {
			add = 25
			stress > low_medium_stress
		}

		modifier = {
			add = 50
			stress > medium_stress
		}

		modifier = {
			add = 50
			stress > high_stress
		}
	}
}
