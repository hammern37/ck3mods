make_concubine_interaction = {
	category = interaction_category_diplomacy

	desc = make_concubine_interaction_desc

	interface = concubine_list
	
	ai_targets = {
		ai_recipients = prisoners
	}
	ai_targets = {
		ai_recipients = courtiers
	}
	ai_target_quick_trigger = {
		adult = yes
		owner_attracted = yes # Not optimal, but saves a lot of performance
	}
	ai_frequency = 12

	needs_recipient_to_open = yes

	redirect = {
		# The UI will open to the already filled left and right first if we don't tell it we've got both sides filled
		scope:actor = {
			save_scope_as = secondary_actor
		}
		scope:recipient = {
			save_scope_as = secondary_recipient
		}
	}

	populate_recipient_list = {
		scope:actor = {
			every_courtier = {
				limit = {
					is_at_home = yes
					can_become_concubine_of_actor_trigger = yes
				}
				add_to_list = characters
			}
			every_prisoner = {
				limit = {
					NOT = { is_in_list = characters }
					can_become_concubine_of_actor_trigger = yes
				}
				add_to_list = characters
			}
		}
	}
	
	is_shown = {
		scope:actor = {
			allowed_concubines = yes
			is_adult = yes
		}
		scope:recipient = {
			OR = {
				is_courtier_of = scope:actor
				is_imprisoned_by = scope:actor
			}
			can_become_concubine_of_actor_trigger = yes
		}
	}

	is_valid_showing_failures_only = {
		custom_description = {
			text = take_concubine_allowed_more
			object = scope:recipient
			scope:actor = {
				allowed_more_concubines = yes
			}
		}
		scope:recipient = {
			is_diplomatically_available = yes
			OR = {
				AND = {
					is_imprisoned_by = scope:actor
					is_married = yes
				}
				is_married = no
			}
		}
	}
	
	ai_potential = {
		is_landed = yes
		is_adult = yes
		fertility > 0
		allowed_more_concubines = yes
		NOR = {
			has_trait = chaste
			has_trait = celibate
			has_sexuality = asexual
		}
	}
	
	auto_accept = yes
	
	ai_will_do = {
		base = 0
		
		modifier = { # Basic Filtering
			add = 100
			scope:actor = {
				number_of_concubines < number_of_desired_concubines
			}
			scope:recipient = {
				OR = {
					sex_opposite_of = scope:actor
					AND = {
						scope:actor = { is_attracted_to_gender_of = scope:recipient }
						scope:actor.faith = { doctrine = doctrine_homosexuality_accepted }
					}
				}
				fertility > 0.2
				age < 36
			}
		}
		
		modifier = {
			add = 100
			scope:recipient = {
				is_imprisoned_by = scope:actor
				OR = {
					sex_opposite_of = scope:actor
					AND = {
						scope:actor = { is_attracted_to_gender_of = scope:recipient }
						scope:actor.faith = { doctrine = doctrine_homosexuality_accepted }
					}
				}
				OR = {
					is_lowborn = no
					num_of_good_genetic_traits > 0
				}
				fertility > 0.1
				trigger_if = {
					limit = {
						is_female = yes
					}
					age < define:NChildbirth|MAX_FEMALE_REPRODUCTION_AGE
				}
			}
		}
	}
	
	on_accept = {
		concubine_on_accept_effect = yes
	}
}

find_concubine = {
	category = interaction_category_diplomacy

	desc = find_concubine_desc

	interface = concubine_list

	needs_recipient_to_open = no

	redirect = {
		scope:actor = { # The UI will open to the already filled left first if we don't tell it we've got "our side" actor which is always ourselves
			save_scope_as = secondary_actor
		}
	}

	populate_recipient_list = {
		scope:actor = {
			every_courtier = {
				limit = {
					is_at_home = yes
					can_become_concubine_of_actor_trigger = yes
				}
				add_to_list = characters
			}
			every_prisoner = {
				limit = {
					NOT = { is_in_list = characters }
					can_become_concubine_of_actor_trigger = yes
				}
				add_to_list = characters
			}
		}
	}

	is_shown = {
		scope:actor = {
			allowed_concubines = yes
			is_adult = yes
			trigger_if = { #So that we show the recipient list, but can also only use this on ourselves, we have to do this check in the beginning
				limit = {
					NOT = { exists = scope:secondary_recipient }
				}
				scope:actor = scope:recipient
			}
		}
		trigger_if = {
			limit = {
				NOT = { scope:actor = scope:recipient }
			}
			scope:actor = {
				OR = {
					sex_opposite_of = scope:recipient
					is_attracted_to_gender_of = scope:recipient
				}
			}
			scope:recipient = {
				can_become_concubine_of_actor_trigger = yes
				is_adult = yes
				OR = {
					is_imprisoned_by = scope:actor
					AND = {
						is_courtier_of = scope:actor
						is_at_home = yes
					}
				}
			}
			scope:actor.faith = { # My faith allows this level of consanguinity
				OR = {
					NOT = { scope:actor = { is_close_or_extended_family_of = scope:recipient } }
					AND = {
						scope:actor = { is_cousin_of = scope:recipient }
						has_doctrine_parameter = allows_cousin_marriage
					}
					AND = {
						scope:actor = {
							OR = {
								is_uncle_or_aunt_of = scope:recipient
								is_nibling_of = scope:recipient
							}
						}
						has_doctrine_parameter = allows_aunt_nephew_and_uncle_niece_marriage
					}
					has_doctrine_parameter = allows_unrestricted_marriage
				}
			}
		}
	}

	is_valid_showing_failures_only = {
		custom_description = {
			text = take_concubine_allowed_more
			object = scope:recipient
			scope:actor = {
				allowed_more_concubines = yes
			}
		}
		trigger_if = {
			limit = {
				NOT = { scope:actor = scope:recipient }
			}
			scope:recipient = {
				can_become_concubine_of_actor_trigger = yes
			}
		}
	}

	can_be_picked = {
		is_adult = yes
	}

	auto_accept = yes

	ai_will_do = {
		base = 0
	}
	
	on_accept = {
		concubine_on_accept_effect = yes
	}
}

dismiss_concubine_interaction = {
	category = interaction_category_diplomacy
	
	is_shown = {
		scope:recipient = {
			is_concubine_of = scope:actor
		}
	}

	is_valid_showing_failures_only = {
		scope:recipient = { is_diplomatically_available = yes }
		scope:recipient = { NOT = { has_strong_hook = scope:actor } }
	}

	auto_accept = yes
	
	on_accept = {
		scope:actor = {
			stress_impact = {
				compassionate = minor_stress_impact_gain
			}
			hidden_effect = {
				send_interface_toast = {
					type = event_generic_neutral
					title = msg_concubine_dismissed_title
					right_icon = scope:recipient
					remove_concubine = scope:recipient
				}
			}
		}
		scope:recipient = {
			trigger_event = marriage_interaction.0050
			add_opinion = {
				modifier = set_me_aside_opinion
				target = scope:actor
			}
			if = {
				limit = {
					is_councillor_of = scope:actor
				}
				# Then they should remain in court
			}
			else_if = { #Dismiss to relevant court, or to pool
				limit = {
					any_close_family_member = {
						is_landed = yes
					}
				}
				random_close_family_member = {
					limit = {
						is_child_of = scope:recipient
						is_landed = yes
					}
					alternative_limit = {
						is_parent_of = scope:recipient
						is_landed = yes
					}
					alternative_limit = {
						is_landed = yes
					}
					add_courtier = scope:recipient
				}
			}
			else = {
				move_to_pool = yes
			}
		}
	}
}