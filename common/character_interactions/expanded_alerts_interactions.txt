hire_court_physician_interaction = {
	category = interaction_category_vassal

	desc = hire_court_physician_interaction_desc

	is_shown = {
		scope:recipient = {
			is_courtier_of = scope:actor
			is_adult = yes
		}
		scope:actor = {
			NOT = {
				any_relation = {
					type = court_physician
					this = scope:recipient
				}
			}
		}
	}

	is_valid_showing_failures_only = {
		scope:recipient = {
			can_be_court_physician_of = { EMPLOYER = scope:actor }
		}
	}

	cost = {
		gold = 10
	}
	
	on_accept = {
		scope:actor = {
			send_interface_message = {
				type = event_generic_neutral
				title = msg_hired_court_physician_interaction_title
				right_icon = scope:recipient

				set_court_physician_effect = {
					PHYSICIAN = scope:recipient
					EMPLOYER = scope:actor
				}
			}
			remove_character_flag = flag_no_physician
		}
		scope:recipient = {
			if = {
				add_opinion = {
					target = scope:actor
					modifier = grateful_opinion
					opinion = 15 #Should match the amount lost when fired so it's not a way to farm opinion
				}
			}
		}
	}
	
	auto_accept = yes
}

grant_independence_interaction = {
	category = interaction_category_vassal
	force_notification = yes
	greeting = positive
	notification_text = GRANT_INDEPENDENCE_INTERACTION_NOTIFICATION

	desc = grant_independence_interaction_desc
	
	is_shown = {
		scope:recipient = {
			is_vassal_of = scope:actor
		}
		NOT = { scope:recipient = scope:actor }
	}

	is_valid_showing_failures_only = {
		NOT = { scope:actor = { is_at_war_with = scope:recipient } }
		scope:actor = {
			is_independent_ruler = yes
			NOT = {
				is_at_war = yes
			}
		}
		custom_description = {
			text = is_at_war_with_another_vassal
			object = scope:recipient
			NOT = {
				scope:actor = {
					any_vassal_or_below = {
						is_at_war_with = scope:recipient
					}
				}
			}
		}
		custom_description = {
			text = is_de_jure_vassal_check
			object = scope:recipient
			NOT = { #Can not be used against de jure vassals
				scope:actor = {
					any_held_title = {
						any_in_de_jure_hierarchy = {
							this.holder = scope:recipient
						}
					}
				}
			}
		}
	}

	auto_accept = yes

	on_accept = {
		scope:actor = {
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = minor_stress_impact_gain
				greedy = minor_stress_impact_gain
			}
			hidden_effect = {	
				send_interface_toast = {
					title = grant_vassal_independence_interaction_toast
					left_icon = scope:actor
					right_icon = scope:recipient

					custom_tooltip = grant_vassal_independence_interaction_toast_desc
				}
			}
		}

		scope:recipient = {
			#Send notifications
			if = {
				limit = {
					any_liege_or_above = {
						is_ai = no
						NOT = { this = scope:actor }
					}
				}
				every_liege_or_above = {
					limit = {
						is_ai = no
						NOT = { this = scope:actor }
					}
					trigger_event = vassal_interaction.0023
				}
			}
			if = {
				limit = {
					any_liege_or_above = {
						any_vassal = {
							is_ai = no
							NOR = {
								this = scope:recipient
								this = scope:actor
							}
						}
					}
				}
				every_liege_or_above = {
					limit = {
						any_vassal = {
							is_ai = no
							NOR = {
								this = scope:recipient
								this = scope:actor
							}
						}
					}
					every_vassal = {
						limit = {
							is_ai = no
							NOT = { this = scope:recipient }
						}
						trigger_event = {
							id = vassal_interaction.0022
							days = 3
						}
					}
				}
			}

			add_opinion = {
				target = scope:actor
				modifier = granted_independence_opinion
			}

			add_truce_both_ways = {
				character = scope:actor
				days = 3650
				name = TRUCE_GRANT_INDEPENDENCE
			}
			
			add_character_flag = {
				flag = has_truce_flag
				days = 3560
			}

			create_title_and_vassal_change = change
			scope:change = {
				set_title_and_vassal_change_type = independency
				set_add_claim_on_loss = yes
			}
			becomes_independent = {
				change = scope:change
			}

			resolve_title_and_vassal_change = scope:change
		}
	}

	ai_will_do = {
		base = 0 #The AI should never do this!
	}
}